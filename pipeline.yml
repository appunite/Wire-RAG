components:
  answer_builder:
    init_parameters:
      pattern: null
      reference_pattern: null
    type: haystack.components.builders.answer_builder.AnswerBuilder
  generator:
    init_parameters:
      api_base_url: null
      api_key:
        env_vars:
        - OPENAI_API_KEY
        strict: true
        type: env_var
      generation_kwargs: {}
      model: gpt-4o-mini
      organization: null
      streaming_callback: null
      system_prompt: "Task: Generate comprehensive documentation based on the provided\
        \ documents. The documentation should capture all essential details and information\
        \ without any information loss, including relevant code fragments from the\
        \ files. Ensure that the output does not cut corners on tokens; generate as\
        \ much content as possible within the limits of the provided documents. Do\
        \ not reference or include information from any sources other than the given\
        \ documents, do not rely on your knowledge.\n\nRequirements:\n\n1. Length:\
        \ The documentation should be detailed and extensive, covering all aspects\
        \ of the content provided in the documents.\n\n2. Structure:\n   - Title Page:\
        \ Include a title that reflects the main theme of the documents.\n   - Introduction:\
        \ Provide a complete and thorough overview of the content, purpose, and scope\
        \ of the documentation.\n   - Main Sections: Divide the documentation into\
        \ logical sections and subsections based on the themes and topics found in\
        \ the documents. Each section should include:\n     - A clear, descriptive\
        \ heading that reflects the content within the section.\n     - Detailed explanations\
        \ of key concepts and ideas. Expand on each idea or concept with thorough\
        \ descriptions, definitions, and context. Ensure the reader fully understands\
        \ the material.\n     - Code fragments: Where applicable, include relevant\
        \ code snippets from the documents. These should be properly formatted and\
        \ explained in detail. For each code snippet, provide a clear explanation\
        \ of its purpose, functionality, and how it fits into the overall system or\
        \ process described in the document.\n     - Examples: Provide relevant examples\
        \ where applicable, explaining them fully to ensure understanding.\n     -\
        \ Conflict Resolution: If there are contradictory pieces of information across\
        \ different documents, resolve them using the date provided at the beginning\
        \ of each document, prioritizing the most recent information. If a document\u2019\
        s date is unknown and conflicts cannot be resolved, explicitly indicate which\
        \ parts contradict one another, then clearly explain the contradiction. Mention\
        \ all unresolved conflicts at the end of each section.\n\n3. Content Guidelines:\n\
        \   - Ensure that all information from the documents is included and accurately\
        \ represented.\n   - The content should not just list bullet points but should\
        \ be expanded into full sentences and paragraphs where necessary, with elaboration\
        \ and explanations for all points.\n   - Use clear and logical transitions\
        \ between sections to maintain the flow and coherence of the document.\n \
        \  - Use bullet points, tables, code fragments, or diagrams where appropriate\
        \ to enhance understanding and readability, but always accompany these elements\
        \ with in-depth explanations.\n\n4. Style: The writing style should be professional,\
        \ formal, and suitable for an audience that may include technical experts,\
        \ stakeholders, or general readers interested in the topic. Avoid jargon unless\
        \ it is explained in detail.\n\n5. Specifics: Highlight any critical findings,\
        \ data, or statistics that are present in the documents. For each significant\
        \ point, explain its relevance and implications. Emphasize any unique or innovative\
        \ aspects that stand out, and provide complete reasoning or analysis where\
        \ needed.\n\nOutput Format: Ensure that the entire documentation is generated\
        \ in Markdown format without any additional text or formatting. The output\
        \ should be ready to be saved directly into a markdown file.\n"
    type: haystack.components.generators.openai.OpenAIGenerator
  joiner:
    init_parameters:
      join_mode: concatenate
      sort_by_score: true
      top_k: null
      weights: null
    type: haystack.components.joiners.document_joiner.DocumentJoiner
  prompt_builder:
    init_parameters:
      required_variables: null
      template: "\nUser Question: {{question}}\nDocuments to Analyze:\n{% for doc\
        \ in documents %}\nDate: {{doc.meta['date']}}\nTitle: {{doc.meta['title']}}\
        \ - {{doc.meta['headline']}}\nContent: \n{{doc.content}}\n{% endfor %}"
      variables: null
    type: haystack.components.builders.prompt_builder.PromptBuilder
  retriever_docs_wire:
    init_parameters:
      document_store:
        init_parameters:
          api_key:
            env_vars:
            - PINECONE_API_KEY
            strict: true
            type: env_var
          batch_size: 100
          dimension: 384
          index: wire-rag
          metric: cosine
          namespace: docs-wire
          spec:
            serverless:
              cloud: aws
              region: us-east-1
        type: haystack_integrations.document_stores.pinecone.document_store.PineconeDocumentStore
      filter_policy: replace
      filters: {}
      top_k: 25
    type: haystack_integrations.components.retrievers.pinecone.embedding_retriever.PineconeEmbeddingRetriever
  retriever_gh:
    init_parameters:
      document_store:
        init_parameters:
          api_key:
            env_vars:
            - PINECONE_API_KEY
            strict: true
            type: env_var
          batch_size: 100
          dimension: 384
          index: wire-rag
          metric: cosine
          namespace: github-wireapp
          spec:
            serverless:
              cloud: aws
              region: us-east-1
        type: haystack_integrations.document_stores.pinecone.document_store.PineconeDocumentStore
      filter_policy: replace
      filters: {}
      top_k: 25
    type: haystack_integrations.components.retrievers.pinecone.embedding_retriever.PineconeEmbeddingRetriever
  text_embedder:
    init_parameters:
      batch_size: 32
      device:
        device: cpu
        type: single
      model: sentence-transformers/all-MiniLM-L6-v2
      model_kwargs: null
      normalize_embeddings: false
      precision: float32
      prefix: ''
      progress_bar: true
      suffix: ''
      token:
        env_vars:
        - HF_API_TOKEN
        - HF_TOKEN
        strict: false
        type: env_var
      tokenizer_kwargs: null
      truncate_dim: null
      trust_remote_code: false
    type: haystack.components.embedders.sentence_transformers_text_embedder.SentenceTransformersTextEmbedder
connections:
- receiver: retriever_gh.query_embedding
  sender: text_embedder.embedding
- receiver: retriever_docs_wire.query_embedding
  sender: text_embedder.embedding
- receiver: joiner.documents
  sender: retriever_gh.documents
- receiver: joiner.documents
  sender: retriever_docs_wire.documents
- receiver: prompt_builder.documents
  sender: joiner.documents
- receiver: answer_builder.documents
  sender: joiner.documents
- receiver: generator.prompt
  sender: prompt_builder.prompt
- receiver: answer_builder.replies
  sender: generator.replies
max_loops_allowed: 100
metadata: {}
